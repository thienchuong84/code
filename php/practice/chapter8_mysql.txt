

CREATE DATABASE publications;

USE publications;

GRANT ALL ON publications.* TO 'jim'@'localhost'
IDENTIFIED BY 'mypasswd';

CREATE TABLE classics (
author VARCHAR(128),
title VARCHAR(128),
type VARCHAR(16),
year CHAR(4)) ENGINE MyISAM;

ALTER TABLE classics ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY;


//-- Renaming a table
ALTER TABLE classics RENAME pre1900;
ALTER TABLE pre1900 RENAME classics;


//-- Changing the data type of a column
ALTER TABLE classics MODIFY year SMALLINT;


//-- Adding a new column
ALTER TABLE classics ADD pages SMALLINT UNSIGNED;


//-- Renaming a column
ALTER TABLE classics CHANGE type category VARCHAR(16);


//-- Removing a column
ALTER TABLE classics DROP pages;


//-- Deleting a table



//-- Using CREATE INDEX
ALTER TABLE classics ADD INDEX(author(20));
CREATE INDEX author ON classics (author(20));

//------ Example 8-12. Creating the table classics with indexes
CREATE TABLE classics (
author VARCHAR(128),
title VARCHAR(128),
category VARCHAR(16),
year SMALLINT,
INDEX(author(20)),
INDEX(title(20)),
INDEX(category(4)),
INDEX(year)) ENGINE MyISAM;


//-- Primary keys
ALTER TABLE classics ADD isbn CHAR(13) PRIMARY KEY;


-------------------------------

//-- Create table classics

CREATE TABLE classics (
author VARCHAR(128),
title VARCHAR(128),
type VARCHAR(16),
year CHAR(4),
id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY) ENGINE MyISAM;


DESCRIBE classics;

//-- insert value to classics table

INSERT INTO classics(author, title, type, year)
VALUES('Mark Twain','The Adventures of Tom Sawyer','Fiction','1876');

INSERT INTO classics(author, title, type, year)
VALUES('Jane Austen','Pride and Prejudice','Fiction','1811');

INSERT INTO classics(author, title, type, year)
VALUES('Charles Darwin','The Origin of Species','Non-Fiction','1856');

INSERT INTO classics(author, title, type, year)
VALUES('Charles Dickens','The Old Curiosity Shop','Fiction','1841');

INSERT INTO classics(author, title, type, year)
VALUES('William Shakespeare','Romeo and Juliet','Play','1594');

//-- change name column type -> title
ALTER TABLE classics CHANGE type category VARCHAR(16);

//-- add index

ALTER TABLE classics ADD INDEX(author(20));
ALTER TABLE classics ADD INDEX(title(20));
ALTER TABLE classics ADD INDEX(category(4));
ALTER TABLE classics ADD INDEX(year);
DESCRIBE classics;


//-- add primary key, but will have error
ALTER TABLE classics ADD isbn CHAR(13) PRIMARY KEY;

//-- fix error and add primary key
ALTER TABLE classics DROP id;

UPDATE classics SET isbn='9781598184891' WHERE year='1876';
UPDATE classics SET isbn='9780582506206' WHERE year='1811';
UPDATE classics SET isbn='9780517123201' WHERE year='1856';
UPDATE classics SET isbn='9780099533474' WHERE year='1841';
UPDATE classics SET isbn='9780192814968' WHERE year='1594';
ALTER TABLE classics ADD PRIMARY KEY(isbn);
DESCRIBE classics;







//-- create table classics with index and primary key

CREATE TABLE classics (
author VARCHAR(128),
title VARCHAR(128),
category VARCHAR(16),
year SMALLINT,
isbn CHAR(13),
INDEX(author(20)),
INDEX(title(20)),
INDEX(category(4)),
INDEX(year),
PRIMARY KEY (isbn)) ENGINE MyISAM;


//-- Example 8-15. Adding a FULLTEXT index to the table classics
ALTER TABLE classics ADD FULLTEXT(author,title);


//-- Example 8-16. Two differentSELECT statements
SELECT author,title FROM classics;
SELECT title,isbn FROM classics;


//-- Example 8-17. Counting rows
SELECT COUNT(*) FROM classics;

//-- Example 8-18. Duplicating data
INSERT INTO classics(author, title, category, year, isbn)
VALUES('Charles Dickens','Little Dorrit','Fiction','1857', '9780141439969');

//-- Example 8-19. With and without the DISTINCT qualifier
SELECT author FROM classics;
SELECT DISTINCT author FROM classics;


//-- Example 8-20. Removing the new entry
DELETE FROM classics WHERE title='Little Dorrit';


//-- Example 8-21. Using the WHERE keyword
SELECT author,title FROM classics WHERE author="Mark Twain";
SELECT author,title FROM classics WHERE isbn="9781598184891 ";


//-- Example 8-22. Using the LIKE qualifier
SELECT author,title FROM classics WHERE author LIKE "Charles%";
SELECT author,title FROM classics WHERE title LIKE "%Species";
SELECT author,title FROM classics WHERE title LIKE "%and%";


//-- Example 8-23. Limiting the number of results returned
SELECT author,title FROM classics LIMIT 3;
SELECT author,title FROM classics LIMIT 1,2;
SELECT author,title FROM classics LIMIT 3,1;


//-- Example 8-24. Using MATCH...AGAINST on FULLTEXT indexes
SELECT author,title FROM classics
WHERE MATCH(author,title) AGAINST('and');
SELECT author,title FROM classics
WHERE MATCH(author,title) AGAINST('curiosity shop');
SELECT author,title FROM classics
WHERE MATCH(author,title) AGAINST('tom sawyer');


//-- Example 8-25. Using MATCH...AGAINST...in Boolean Mode
SELECT author,title FROM classics
WHERE MATCH(author,title)
AGAINST('+charles -species' IN BOOLEAN MODE);
SELECT author,title FROM classics
WHERE MATCH(author,title)
AGAINST('"origin of"' IN BOOLEAN MODE);


//-- Example 8-26. Using UPDATE...SET
UPDATE classics SET author='Mark Twain (Samuel Langhorne Clemens)'
WHERE author='Mark Twain';
UPDATE classics SET category='Classic Fiction'
WHERE category='Fiction';


//-- Example 8-27. Using ORDER BY
SELECT author,title FROM classics ORDER BY author;
SELECT author,title FROM classics ORDER BY title DESC;

SELECT author,title,year FROM classics ORDER BY author,year DESC;
SELECT author,title,year FROM classics ORDER BY author ASC,year DESC;



SELECT category,COUNT(author) FROM classics GROUP BY category;



//-- Example 8-28. Creating and populating the customers table
CREATE TABLE customers (
name VARCHAR(128),
isbn VARCHAR(13),
PRIMARY KEY (isbn)) ENGINE MyISAM;
INSERT INTO customers(name,isbn)
VALUES('Joe Bloggs','9780099533474');
INSERT INTO customers(name,isbn)
VALUES('Mary Smith','9780582506206');
INSERT INTO customers(name,isbn)
VALUES('Jack Wilson','9780517123201');
SELECT * FROM customers;


INSERT INTO customers(name,isbn) VALUES
('Joe Bloggs','9780099533474'),
('Mary Smith','9780582506206'),
('Jack Wilson','9780517123201');


//-- Example 8-29. Joining two tables into a single SELECT
SELECT name,author,title from customers,classics
 WHERE customers.isbn=classics.isbn;


//-- NATURAL JOIN , giống ở trên nhưng tiết kiệm tgian hơn nhờ auto map
SELECT name,author,title FROM customers NATURAL JOIN classics;


//-- JOIN...ON
SELECT name,author,title FROM customers
 JOIN classics ON customers.isbn=classics.isbn;


//-- Using AS
SELECT name,author,title from
 customers AS cust, classics AS class WHERE cust.isbn=class.isbn;


Using Logical Operators
//-- Example 8-30. Using logical operators
SELECT author,title FROM classics WHERE
 author LIKE "Charles%" AND author LIKE "%Darwin";
SELECT author,title FROM classics WHERE
 author LIKE "%Mark Twain%" OR author LIKE "%Samuel Langhorne Clemens%";
SELECT author,title FROM classics WHERE
 author LIKE "Charles%" AND author NOT LIKE "%Darwin";



MySQL Functions
http://tinyurl.com/mysqlstrings
http://tinyurl.com/mysqldates
However, to get you started, Appendix Ddescribes a subset containing the most useful of these functions.


























